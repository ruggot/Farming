//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float MaxGlobalDistance;           // Offset:    0 Size:     4 [unused]
//   float4 GlobalVolumeCenterAndExtent[4];// Offset:   16 Size:    64 [unused]
//   float4 GlobalVolumeWorldToUVAddAndMul[4];// Offset:   80 Size:    64 [unused]
//   float GlobalVolumeDimension;       // Offset:  144 Size:     4 [unused]
//   float GlobalVolumeTexelSize;       // Offset:  148 Size:     4 [unused]
//   uint EmitterTickCounter;           // Offset:  152 Size:     4 [unused]
//   int4 EmitterSpawnInfoOffsets[2];   // Offset:  160 Size:    32
//   float4 EmitterSpawnInfoParams[8];  // Offset:  192 Size:   128
//   uint SpawnedInstances;             // Offset:  320 Size:     4
//   uint UpdateStartInstance;          // Offset:  324 Size:     4
//   int DefaultSimulationStageIndex;   // Offset:  328 Size:     4 [unused]
//   int SimulationStageIndex;          // Offset:  332 Size:     4 [unused]
//   int IterationInterfaceCount;       // Offset:  336 Size:     4 [unused]
//   uint ComponentBufferSizeRead;      // Offset:  340 Size:     4
//   uint ComponentBufferSizeWrite;     // Offset:  344 Size:     4
//   int NumEventsPerParticle;          // Offset:  348 Size:     4 [unused]
//   int NumParticlesPerEvent;          // Offset:  352 Size:     4 [unused]
//   uint CopyInstancesBeforeStart;     // Offset:  356 Size:     4 [unused]
//   uint SimStart;                     // Offset:  360 Size:     4 [unused]
//   uint ReadInstanceCountOffset;      // Offset:  364 Size:     4
//   uint WriteInstanceCountOffset;     // Offset:  368 Size:     4
//   float MinTime_Emitter_Color_ColorCurve;// Offset:  372 Size:     4
//   float MaxTime_Emitter_Color_ColorCurve;// Offset:  376 Size:     4 [unused]
//   float InvTimeRange_Emitter_Color_ColorCurve;// Offset:  380 Size:     4
//   float CurveLUTNumMinusOne_Emitter_Color_ColorCurve;// Offset:  384 Size:     4
//   float MinTime_Emitter_ScaleFactorCurve;// Offset:  388 Size:     4 [unused]
//   float MaxTime_Emitter_ScaleFactorCurve;// Offset:  392 Size:     4 [unused]
//   float InvTimeRange_Emitter_ScaleFactorCurve;// Offset:  396 Size:     4 [unused]
//   float CurveLUTNumMinusOne_Emitter_ScaleFactorCurve;// Offset:  400 Size:     4 [unused]
//
// }
//
// cbuffer FNiagaraGlobalParameters
// {
//
//   float Engine_DeltaTime;            // Offset:    0 Size:     4
//   float Engine_InverseDeltaTime;     // Offset:    4 Size:     4 [unused]
//   float Engine_Time;                 // Offset:    8 Size:     4 [unused]
//   float Engine_RealTime;             // Offset:   12 Size:     4 [unused]
//
// }
//
// cbuffer FNiagaraSystemParameters
// {
//
//   float Engine_Owner_TimeSinceRendered;// Offset:    0 Size:     4 [unused]
//   float Engine_Owner_LODDistance;    // Offset:    4 Size:     4 [unused]
//   float Engine_Owner_LODDistanceFraction;// Offset:    8 Size:     4 [unused]
//   float Engine_System_Age;           // Offset:   12 Size:     4 [unused]
//   int Engine_Owner_ExecutionState;   // Offset:   16 Size:     4 [unused]
//   int Engine_System_TickCount;       // Offset:   20 Size:     4
//   int Engine_System_NumEmitters;     // Offset:   24 Size:     4 [unused]
//   int Engine_System_NumEmittersAlive;// Offset:   28 Size:     4 [unused]
//
// }
//
// cbuffer FNiagaraOwnerParameters
// {
//
//   row_major float4x4 Engine_Owner_SystemLocalToWorld;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 Engine_Owner_SystemWorldToLocal;// Offset:   64 Size:    64 [unused]
//   row_major float4x4 Engine_Owner_SystemLocalToWorldTransposed;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 Engine_Owner_SystemWorldToLocalTransposed;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 Engine_Owner_SystemLocalToWorldNoScale;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 Engine_Owner_SystemWorldToLocalNoScale;// Offset:  320 Size:    64
//   float4 Engine_Owner_Rotation;      // Offset:  384 Size:    16 [unused]
//   float4 Engine_Owner_Position;      // Offset:  400 Size:    16 [unused]
//   float4 Engine_Owner_Velocity;      // Offset:  416 Size:    16 [unused]
//   float4 Engine_Owner_SystemXAxis;   // Offset:  432 Size:    16 [unused]
//   float4 Engine_Owner_SystemYAxis;   // Offset:  448 Size:    16 [unused]
//   float4 Engine_Owner_SystemZAxis;   // Offset:  464 Size:    16 [unused]
//   float4 Engine_Owner_Scale;         // Offset:  480 Size:    16 [unused]
//
// }
//
// cbuffer FNiagaraEmitterParameters
// {
//
//   int Engine_Emitter_NumParticles;   // Offset:    0 Size:     4 [unused]
//   int Engine_Emitter_TotalSpawnedParticles;// Offset:    4 Size:     4
//   float Engine_Emitter_SpawnCountScale;// Offset:    8 Size:     4 [unused]
//   float Emitter_Age;                 // Offset:   12 Size:     4 [unused]
//   int Emitter_RandomSeed;            // Offset:   16 Size:     4
//   int Engine_Emitter_PaddingInt32_0; // Offset:   20 Size:     4 [unused]
//   int Engine_Emitter_PaddingInt32_1; // Offset:   24 Size:     4 [unused]
//   int Engine_Emitter_PaddingInt32_2; // Offset:   28 Size:     4 [unused]
//
// }
//
// cbuffer FNiagaraExternalParameters
// {
//
//   float Constants_Emitter_UniformRangedFloat004_Minimum;// Offset:    0 Size:     4
//   float Constants_Emitter_UniformRangedFloat004_Maximum;// Offset:    4 Size:     4
//   int Constants_Emitter_UniformRangedFloat004_RandomSeed;// Offset:    8 Size:     4 [unused]
//   float Constants_Emitter_UniformRangedFloat005_Minimum;// Offset:   12 Size:     4
//   float Constants_Emitter_UniformRangedFloat005_Maximum;// Offset:   16 Size:     4
//   int Constants_Emitter_UniformRangedFloat005_RandomSeed;// Offset:   20 Size:     4 [unused]
//   float4 Constants_Emitter_InitializeParticle_SpriteSize;// Offset:   32 Size:    16 [unused]
//   float Constants_Emitter_InitializeParticle_SpriteRotation;// Offset:   48 Size:     4 [unused]
//   float4 Constants_Emitter_InitializeParticle_MeshScale;// Offset:   64 Size:    16 [unused]
//   float Constants_Emitter_UniformRangedFloat002_Minimum;// Offset:   80 Size:     4
//   float Constants_Emitter_UniformRangedFloat002_Maximum;// Offset:   84 Size:     4
//   int Constants_Emitter_UniformRangedFloat002_RandomSeed;// Offset:   88 Size:     4 [unused]
//   float Constants_Emitter_AddVelocityInCone_ConeAngle;// Offset:   92 Size:     4
//   float Constants_Emitter_AddVelocityInCone_VelocityDistributionAlongConeAxis;// Offset:   96 Size:     4
//   float4 Constants_Emitter_AddVelocityInCone_ConeAxis;// Offset:  112 Size:    16
//   float Constants_Emitter_AddVelocityInCone_VelocityFalloffAwayFromConeAxis;// Offset:  128 Size:     4
//   float4 Constants_Emitter_GravityForce_Gravity;// Offset:  144 Size:    16
//   float Constants_Emitter_Drag_Drag; // Offset:  160 Size:     4
//   float Constants_Emitter_Drag_RotationalDrag;// Offset:  164 Size:     4 [unused]
//   float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;// Offset:  168 Size:     4 [unused]
//   float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;// Offset:  172 Size:     4 [unused]
//   float Constants_Emitter_ScaleColorBySpeed_MinSpeedThreshold;// Offset:  176 Size:     4
//   float Constants_Emitter_ScaleColorBySpeed_MaxSpeedThreshold;// Offset:  180 Size:     4
//   float Constants_Emitter_ScaleColorBySpeed_RGBScaleMin;// Offset:  184 Size:     4
//   float Constants_Emitter_ScaleColorBySpeed_RGBScaleMax;// Offset:  188 Size:     4
//   float Constants_Emitter_ScaleColorBySpeed_AScaleMin;// Offset:  192 Size:     4
//   float Constants_Emitter_ScaleColorBySpeed_AScaleMax;// Offset:  196 Size:     4
//   float Constants_Emitter_ScaleMeshSizeBySpeed_SpeedThreshold;// Offset:  200 Size:     4
//   float4 Constants_Emitter_ScaleMeshSizeBySpeed_MinScaleFactor;// Offset:  208 Size:    16
//   float4 Constants_Emitter_ScaleMeshSizeBySpeed_MaxScaleFactor;// Offset:  224 Size:    16
//   float Emitter_SpawnRate;           // Offset:  240 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// InputFloat                        texture   float         buf             t0      1 
// InputInt                          texture    sint         buf             t1      1 
// CurveLUT_Emitter_Color_ColorCurve    texture   float         buf             t2      1 
// RWOutputInt                           UAV    sint         buf             u0      1 
// RWOutputFloat                         UAV   float         buf             u1      1 
// RWInstanceCounts                      UAV    uint         buf             u2      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// FNiagaraGlobalParameters          cbuffer      NA          NA            cb1      1 
// FNiagaraSystemParameters          cbuffer      NA          NA            cb2      1 
// FNiagaraOwnerParameters           cbuffer      NA          NA            cb3      1 
// FNiagaraEmitterParameters         cbuffer      NA          NA            cb4      1 
// FNiagaraExternalParameters        cbuffer      NA          NA            cb5      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[25], dynamicIndexed
dcl_constantbuffer CB1[1], immediateIndexed
dcl_constantbuffer CB2[2], immediateIndexed
dcl_constantbuffer CB3[23], immediateIndexed
dcl_constantbuffer CB4[2], immediateIndexed
dcl_constantbuffer CB5[15], immediateIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_buffer (sint,sint,sint,sint) t1
dcl_resource_buffer (float,float,float,float) t2
dcl_uav_typed_buffer (sint,sint,sint,sint) u0
dcl_uav_typed_buffer (float,float,float,float) u1
dcl_uav_typed_buffer (uint,uint,uint,uint) u2
dcl_input vThreadIDInGroup.x
dcl_input vThreadID.x
dcl_temps 14
dcl_tgsm_structured g0, 4, 32
dcl_tgsm_structured g1, 4, 8
dcl_tgsm_structured g2, 4, 2
dcl_tgsm_raw g3, 4
dcl_thread_group 32, 1, 1
iadd r0.x, vThreadID.x, cb0[20].y
ieq r0.y, cb0[22].w, l(-1)
ld_uav_typed_indexable(buffer)(uint,uint,uint,uint) r0.z, cb0[22].wwww, u2.yzxw
movc r0.y, r0.y, l(0), r0.z
iadd r0.z, r0.y, cb0[20].x
iadd r0.z, r0.z, cb0[20].y
ult r0.zw, r0.xxxx, r0.zzzy
and r0.w, r0.z, r0.w
if_nz r0.w
  ld_indexable(buffer)(float,float,float,float) r0.w, r0.xxxx, t0.yzwx
  imad r1.xyzw, l(5, 6, 7, 9), cb0[21].yyyy, r0.xxxx
  ld_indexable(buffer)(float,float,float,float) r2.x, r1.xxxx, t0.xyzw
  ld_indexable(buffer)(float,float,float,float) r2.y, r1.yyyy, t0.yxzw
  ld_indexable(buffer)(float,float,float,float) r2.z, r1.zzzz, t0.yzxw
  ishl r1.xy, cb0[21].yyyy, l(3, 4, 0, 0)
  iadd r1.xy, r0.xxxx, r1.xyxx
  ld_indexable(buffer)(float,float,float,float) r2.w, r1.xxxx, t0.yzwx
  ld_indexable(buffer)(float,float,float,float) r1.x, r1.wwww, t0.xwyz
  imad r3.xyzw, l(10, 11, 12, 13), cb0[21].yyyy, r0.xxxx
  ld_indexable(buffer)(float,float,float,float) r1.z, r3.xxxx, t0.ywxz
  ld_indexable(buffer)(float,float,float,float) r1.w, r3.yyyy, t0.ywzx
  ld_indexable(buffer)(float,float,float,float) r3.x, r3.zzzz, t0.xyzw
  ld_indexable(buffer)(float,float,float,float) r3.y, r3.wwww, t0.yxzw
  imad r4.xyzw, l(14, 17, 18, 25), cb0[21].yyyy, r0.xxxx
  ld_indexable(buffer)(float,float,float,float) r3.z, r4.xxxx, t0.yzxw
  ld_indexable(buffer)(float,float,float,float) r5.x, r1.yyyy, t0.xyzw
  ld_indexable(buffer)(float,float,float,float) r5.y, r4.yyyy, t0.yxzw
  ld_indexable(buffer)(float,float,float,float) r5.z, r4.zzzz, t0.yzxw
  ld_indexable(buffer)(float,float,float,float) r1.y, r4.wwww, t0.yxzw
  imad r4.xyzw, l(26, 27, 28, 29), cb0[21].yyyy, r0.xxxx
  ld_indexable(buffer)(float,float,float,float) r3.w, r4.xxxx, t0.yzwx
  ld_indexable(buffer)(float,float,float,float) r4.x, r4.yyyy, t0.xyzw
  ld_indexable(buffer)(sint,sint,sint,sint) r6.x, r0.xxxx, t1.xyzw
  ld_indexable(buffer)(float,float,float,float) r7.x, r4.zzzz, t0.xyzw
  ld_indexable(buffer)(float,float,float,float) r7.y, r4.wwww, t0.yxzw
  imad r4.y, l(30), cb0[21].y, r0.x
  ld_indexable(buffer)(float,float,float,float) r7.z, r4.yyyy, t0.yzxw
  add r0.w, r0.w, cb1[0].x
  max r4.yw, r3.xxxy, l(0.000000, 0.000010, 0.000000, 0.000100)
  add r4.z, r4.y, l(-0.000100)
  lt r4.z, r0.w, r4.z
  div r4.y, r0.w, r4.y
  mul r8.xyz, r3.yyyy, cb5[9].xyzx
  mul r9.xyz, r8.yyyy, cb3[21].xyzx
  mad r8.xyw, r8.xxxx, cb3[20].xyxz, r9.xyxz
  mad r8.xyz, r8.zzzz, cb3[22].xyzx, r8.xywx
  div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
  mul r8.xyz, r8.xyzx, r4.wwww
  mad r7.xyz, r8.xyzx, cb1[0].xxxx, r7.xyzx
  max r4.w, cb5[10].x, l(0.000000)
  mad r4.w, cb1[0].x, r4.w, l(1.000000)
  div r7.xyz, r7.xyzx, r4.wwww
  mad r5.xyz, r7.xyzx, cb1[0].xxxx, r5.xyzx
  dp3 r4.w, r7.xyzx, r7.xyzx
  sqrt r4.w, r4.w
  lt r5.w, r4.w, l(0.000010)
  movc r7.w, r5.w, l(1.000000), r4.w
  add r7.w, r7.w, -cb5[11].x
  max r7.w, r7.w, l(0.000100)
  add r8.xy, -cb5[11].xzxx, cb5[11].ywyy
  max r8.x, r8.x, l(0.000100)
  div r7.w, r7.w, r8.x
  min r7.w, r7.w, l(1.000000)
  add r7.w, -r7.w, l(1.000000)
  mad r8.xyz, r7.wwww, r8.yyyy, cb5[11].zzzz
  add r9.x, -cb5[12].x, cb5[12].y
  mad r8.w, r7.w, r9.x, cb5[12].x
  mul r8.xyzw, r2.xyzw, r8.xyzw
  max r7.w, cb5[12].z, l(0.000100)
  max r4.w, r4.w, l(0.000100)
  movc r4.w, r5.w, l(0.000100), r4.w
  min r4.w, r7.w, r4.w
  div r4.w, r4.w, r7.w
  min r4.w, r4.w, l(1.000000)
  add r9.xyz, -cb5[13].xyzx, cb5[14].xyzx
  mad r9.xyz, r4.wwww, r9.xyzx, cb5[13].xyzx
  mul r9.xyz, r1.xzwx, r9.xyzx
  mov r4.w, r7.x
  mov r5.w, r7.y
  mov r7.xyw, r7.xyxz
else 
  uge r9.w, r0.x, r0.y
  and r0.z, r0.z, r9.w
  if_nz r0.z
    iadd r0.x, -r0.y, r0.x
    ige r10.xyzw, r0.xxxx, cb0[10].xyzw
    and r10.xyzw, r10.xyzw, l(1, 1, 1, 1)
    iadd r0.y, r10.y, r10.x
    iadd r0.y, r10.z, r0.y
    iadd r0.y, r10.w, r0.y
    ige r10.xyzw, r0.xxxx, cb0[11].xyzw
    and r10.xyzw, r10.xyzw, l(1, 1, 1, 1)
    iadd r0.z, r10.y, r10.x
    iadd r0.z, r10.z, r0.z
    iadd r0.z, r10.w, r0.z
    iadd r0.y, r0.z, r0.y
    iadd r0.x, r0.x, -cb0[r0.y + 12].w
    iadd r10.x, r0.x, cb4[0].y
    itof r0.x, r0.x
    mad r0.x, cb0[r0.y + 12].x, r0.x, cb0[r0.y + 12].y
    add r0.w, -r0.x, cb1[0].x
    add r0.x, -cb5[0].x, cb5[0].y
    bfi r6.xyzw, l(16, 16, 16, 16), l(16, 16, 16, 16), cb4[1].xxxx, l(1, 2, 3, 4)
    mov r10.y, cb2[1].y
    mov r10.zw, r6.xxxy
    imad r11.xyz, r10.xyzx, l(0x0019660d, 0x0019660d, 0x0019660d, 0), l(0x3c6ef35f, 0x3c6ef35f, 0x3c6ef35f, 0)
    imad r0.y, r11.y, r11.z, r11.x
    imad r0.z, r11.z, r0.y, r11.y
    imad r9.w, r0.y, r0.z, r11.z
    imad r0.y, r0.z, r9.w, r0.y
    ishr r0.y, r0.y, l(8)
    and r0.y, r0.y, l(0x00ffffff)
    utof r0.y, r0.y
    mul r0.x, r0.x, r0.y
    mad r3.x, r0.x, l(0.000000), cb5[0].x
    add r0.x, -cb5[0].w, cb5[1].x
    imad r11.xyz, r10.xywx, l(0x0019660d, 0x0019660d, 0x0019660d, 0), l(0x3c6ef35f, 0x3c6ef35f, 0x3c6ef35f, 0)
    imad r0.y, r11.y, r11.z, r11.x
    imad r0.z, r11.z, r0.y, r11.y
    imad r9.w, r0.y, r0.z, r11.z
    imad r0.y, r0.z, r9.w, r0.y
    ishr r0.y, r0.y, l(8)
    and r0.y, r0.y, l(0x00ffffff)
    utof r0.y, r0.y
    mul r0.x, r0.x, r0.y
    mad r3.y, r0.x, l(0.000000), cb5[0].w
    mul_sat r0.x, cb0[23].w, -cb0[23].y
    mul r0.y, r0.x, cb0[24].x
    round_ni r0.y, r0.y
    lt r0.z, r0.y, cb0[24].x
    add r9.w, r0.y, l(1.000000)
    movc r0.z, r0.z, r9.w, r0.y
    mad r0.x, r0.x, cb0[24].x, -r0.y
    mul r9.w, r0.y, l(4.000000)
    mul r10.z, r0.z, l(4.000000)
    ftou r9.w, r9.w
    ld_indexable(buffer)(float,float,float,float) r11.x, r9.wwww, t2.xyzw
    mad r12.xyz, r0.yyyy, l(4.000000, 4.000000, 4.000000, 0.000000), l(1.000000, 2.000000, 3.000000, 0.000000)
    ftou r12.xyz, r12.xyzx
    ld_indexable(buffer)(float,float,float,float) r11.y, r12.xxxx, t2.yxzw
    ld_indexable(buffer)(float,float,float,float) r11.z, r12.yyyy, t2.yzxw
    ld_indexable(buffer)(float,float,float,float) r11.w, r12.zzzz, t2.yzwx
    ftou r0.y, r10.z
    ld_indexable(buffer)(float,float,float,float) r12.x, r0.yyyy, t2.xyzw
    mad r13.xyz, r0.zzzz, l(4.000000, 4.000000, 4.000000, 0.000000), l(1.000000, 2.000000, 3.000000, 0.000000)
    ftou r13.xyz, r13.xyzx
    ld_indexable(buffer)(float,float,float,float) r12.y, r13.xxxx, t2.yxzw
    ld_indexable(buffer)(float,float,float,float) r12.z, r13.yyyy, t2.yzxw
    ld_indexable(buffer)(float,float,float,float) r12.w, r13.zzzz, t2.yzwx
    add r12.xyzw, -r11.xyzw, r12.xyzw
    mad r2.xyzw, r0.xxxx, r12.xyzw, r11.xyzw
    mov r6.xy, r10.xyxx
    imad r0.xyz, r6.xyzx, l(0x0019660d, 0x0019660d, 0x0019660d, 0), l(0x3c6ef35f, 0x3c6ef35f, 0x3c6ef35f, 0)
    imad r0.x, r0.y, r0.z, r0.x
    imad r0.y, r0.z, r0.x, r0.y
    imad r0.z, r0.x, r0.y, r0.z
    imad r0.x, r0.y, r0.z, r0.x
    ishr r0.x, r0.x, l(8)
    and r0.x, r0.x, l(0x00ffffff)
    utof r0.x, r0.x
    mul r3.z, r0.x, l(0.000000)
    add r0.x, -cb5[5].x, cb5[5].y
    imad r10.xyz, r6.xywx, l(0x0019660d, 0x0019660d, 0x0019660d, 0), l(0x3c6ef35f, 0x3c6ef35f, 0x3c6ef35f, 0)
    imad r0.y, r10.y, r10.z, r10.x
    imad r0.z, r10.z, r0.y, r10.y
    imad r9.w, r0.y, r0.z, r10.z
    imad r0.y, r0.z, r9.w, r0.y
    ishr r0.y, r0.y, l(8)
    and r0.y, r0.y, l(0x00ffffff)
    utof r0.y, r0.y
    mul r0.x, r0.x, r0.y
    mad r0.x, r0.x, l(0.000000), cb5[5].x
    max r0.y, cb5[5].w, l(0.000010)
    bfi r10.xyz, l(16, 16, 16, 0), l(16, 16, 16, 0), cb4[1].xxxx, l(5, 6, 7, 0)
    mov r6.zw, r10.xxxy
    imad r11.xyz, r6.xyzx, l(0x0019660d, 0x0019660d, 0x0019660d, 0), l(0x3c6ef35f, 0x3c6ef35f, 0x3c6ef35f, 0)
    imad r0.z, r11.y, r11.z, r11.x
    imad r6.z, r11.z, r0.z, r11.y
    imad r9.w, r0.z, r6.z, r11.z
    imad r0.z, r6.z, r9.w, r0.z
    ishr r0.z, r0.z, l(8)
    and r0.z, r0.z, l(0x00ffffff)
    utof r0.z, r0.z
    mul r11.x, r0.z, l(0.000000)
    imad r12.xyz, r6.xywx, l(0x0019660d, 0x0019660d, 0x0019660d, 0), l(0x3c6ef35f, 0x3c6ef35f, 0x3c6ef35f, 0)
    imad r0.z, r12.y, r12.z, r12.x
    imad r6.z, r12.z, r0.z, r12.y
    imad r6.w, r0.z, r6.z, r12.z
    imad r0.z, r6.z, r6.w, r0.z
    ishr r0.z, r0.z, l(8)
    and r0.z, r0.z, l(0x00ffffff)
    utof r0.z, r0.z
    mul r0.z, r0.z, l(0.000000)
    log r0.z, r0.z
    mul r0.z, r0.z, cb5[6].x
    exp r0.z, r0.z
    min r6.z, r0.y, l(179.875000)
    mul r6.z, r6.z, l(0.008727)
    sincos r12.x, r13.x, r6.z
    div r6.z, r12.x, r13.x
    mov r10.xy, r6.xyxx
    imad r10.xyz, r10.xyzx, l(0x0019660d, 0x0019660d, 0x0019660d, 0), l(0x3c6ef35f, 0x3c6ef35f, 0x3c6ef35f, 0)
    imad r6.y, r10.y, r10.z, r10.x
    imad r6.w, r10.z, r6.y, r10.y
    imad r9.w, r6.y, r6.w, r10.z
    imad r6.y, r6.w, r9.w, r6.y
    ishr r6.y, r6.y, l(8)
    and r6.y, r6.y, l(0x00ffffff)
    utof r6.y, r6.y
    mul r6.y, r6.y, l(0.000000)
    sincos r10.x, r12.x, r6.y
    mul r10.y, r11.x, r12.x
    mul r10.z, r10.x, r11.x
    mul r6.yz, r6.zzzz, r10.yyzy
    mul r11.yz, r0.zzzz, r6.yyzy
    dp3 r0.z, r11.xyzx, r11.xyzx
    sqrt r11.w, r0.z
    lt r0.z, r11.w, l(0.000010)
    movc r10.xyzw, r0.zzzz, l(1.000000,0,0,1.000000), r11.xyzw
    div r6.yzw, r10.yyzx, r10.wwww
    movc r6.yzw, r0.zzzz, l(0,0,0,1.000000), r6.yyzw
    mul r0.y, r0.y, l(0.008727)
    sincos null, r0.y, r0.y
    add r0.z, -r0.y, r6.w
    add r0.y, -r0.y, l(1.000000)
    div_sat r0.y, r0.z, r0.y
    dp3 r0.z, cb5[7].xyzx, cb5[7].xyzx
    rsq r0.z, r0.z
    mul r10.xyz, r0.zzzz, cb5[7].xyzx
    dp3 r9.w, r10.xyzx, r10.xyzx
    sqrt r9.w, r9.w
    mad r11.w, cb5[7].x, r0.z, r9.w
    mul r0.z, r9.w, l(0.000340)
    ge r0.z, r11.w, r0.z
    mov r11.x, l(0)
    mul r11.yz, r10.zzyz, l(0.000000, -1.000000, 1.000000, 0.000000)
    movc r10.xyzw, r0.zzzz, r11.xyzw, l(0,0,1.000000,0)
    dp3 r0.z, r10.yzwy, r10.yzwy
    rsq r0.z, r0.z
    mul r10.xyzw, r0.zzzz, r10.xyzw
    dp4 r0.z, r10.yyzz, r6.yyzz
    dp2 r9.w, r10.yzyy, r10.yzyy
    mad r9.w, r10.w, r10.w, -r9.w
    mul r11.xyz, r6.wyzw, r9.wwww
    mad r11.xyz, r10.xyzx, r0.zzzz, r11.xyzx
    mul r12.xyz, r6.yzwy, r10.zxyz
    mad r6.yzw, r10.yyzx, r6.zzwy, -r12.xxyz
    add r0.z, r10.w, r10.w
    mad r6.yzw, r6.yyzw, r0.zzzz, r11.xxyz
    max r0.z, cb5[8].x, l(0.000100)
    log r0.y, r0.y
    mul r0.y, r0.y, r0.z
    exp r0.y, r0.y
    mul r0.x, r0.y, r0.x
    mul r0.xyz, r0.xxxx, r6.yzwy
    max r6.y, r3.x, l(0.000010)
    add r6.z, r6.y, l(-0.000100)
    lt r4.z, r0.w, r6.z
    div r4.y, r0.w, r6.y
    mul r6.yzw, r3.yyyy, cb5[9].xxyz
    mul r10.xyz, r6.zzzz, cb3[21].xyzx
    mad r10.xyz, r6.yyyy, cb3[20].xyzx, r10.xyzx
    mad r6.yzw, r6.wwww, cb3[22].xxyz, r10.xxyz
    max r9.w, r3.y, l(0.000100)
    div r9.w, l(1.000000, 1.000000, 1.000000, 1.000000), r9.w
    mul r6.yzw, r6.yyzw, r9.wwww
    mad r0.xyz, r6.yzwy, r0.wwww, r0.xyzx
    max r6.y, cb5[10].x, l(0.000000)
    mad r6.y, r0.w, r6.y, l(1.000000)
    div r7.xyz, r0.xyzx, r6.yyyy
    mul r5.xyz, r0.wwww, r7.xyzx
    dp3 r0.x, r7.xyzx, r7.xyzx
    sqrt r0.x, r0.x
    lt r0.y, r0.x, l(0.000010)
    movc r0.z, r0.y, l(1.000000), r0.x
    add r0.z, r0.z, -cb5[11].x
    max r0.xz, r0.xxzx, l(0.000100, 0.000000, 0.000100, 0.000000)
    add r6.yz, -cb5[11].xxzx, cb5[11].yywy
    max r6.y, r6.y, l(0.000100)
    div r0.z, r0.z, r6.y
    min r0.z, r0.z, l(1.000000)
    add r0.z, -r0.z, l(1.000000)
    mad r10.xyz, r0.zzzz, r6.zzzz, cb5[11].zzzz
    add r6.y, -cb5[12].x, cb5[12].y
    mad r10.w, r0.z, r6.y, cb5[12].x
    mul r8.xyzw, r2.xyzw, r10.xyzw
    max r0.z, cb5[12].z, l(0.000100)
    movc r0.x, r0.y, l(0.000100), r0.x
    min r0.x, r0.z, r0.x
    div r0.x, r0.x, r0.z
    min r0.x, r0.x, l(1.000000)
    add r6.yzw, -cb5[13].xxyz, cb5[14].xxyz
    mad r9.xyz, r0.xxxx, r6.yzwy, cb5[13].xyzx
    mov r1.xzw, l(1.000000,0,1.000000,1.000000)
    mov r4.w, r7.x
    mov r5.w, r7.y
    mov r3.w, l(10.000000)
    mov r4.x, l(10.000000)
    mov r7.xyw, r7.xyxz
  else 
    mov r0.w, l(0)
    mov r8.xyzw, l(0,0,0,0)
    mov r2.xyzw, l(0,0,0,0)
    mov r1.xzw, l(0,0,0,0)
    mov r5.xyzw, l(0,0,0,0)
    mov r9.xyz, l(0,0,0,0)
    mov r3.xyzw, l(0,0,0,0)
    mov r6.x, l(0)
    mov r7.xyzw, l(0,0,0,0)
    mov r4.xyzw, l(0,0,0,0)
  endif 
  mov r1.y, l(0)
endif 
and r0.x, r4.z, l(1)
store_structured g0.x, vThreadIDInGroup.x, l(0), r0.x
sync_g_t
and r0.yz, vThreadIDInGroup.xxxx, l(0, 3, 15, 0)
if_z r0.y
  iadd r6.yzw, vThreadIDInGroup.xxxx, l(0, 1, 2, 3)
  ld_structured r0.y, r6.y, l(0), g0.xxxx
  iadd r0.y, r0.y, r0.x
  ld_structured r9.w, r6.z, l(0), g0.xxxx
  iadd r9.w, r0.y, r9.w
  ld_structured r10.x, r6.w, l(0), g0.xxxx
  iadd r10.x, r9.w, r10.x
  store_structured g0.x, vThreadIDInGroup.x, l(0), l(0)
  store_structured g0.x, r6.y, l(0), r0.x
  store_structured g0.x, r6.z, l(0), r0.y
  store_structured g0.x, r6.w, l(0), r9.w
  ushr r0.x, vThreadIDInGroup.x, l(2)
  store_structured g1.x, r0.x, l(0), r10.x
endif 
sync_g_t
if_z r0.z
  ushr r0.x, vThreadIDInGroup.x, l(2)
  ld_structured r0.y, r0.x, l(0), g1.xxxx
  iadd r6.yzw, r0.xxxx, l(0, 1, 2, 3)
  ld_structured r0.z, r6.y, l(0), g1.xxxx
  iadd r0.z, r0.z, r0.y
  ld_structured r9.w, r6.z, l(0), g1.xxxx
  iadd r9.w, r0.z, r9.w
  ld_structured r10.x, r6.w, l(0), g1.xxxx
  iadd r10.x, r9.w, r10.x
  store_structured g1.x, r0.x, l(0), l(0)
  store_structured g1.x, r6.y, l(0), r0.y
  store_structured g1.x, r6.z, l(0), r0.z
  store_structured g1.x, r6.w, l(0), r9.w
  ushr r0.x, r0.x, l(2)
  store_structured g2.x, r0.x, l(0), r10.x
endif 
sync_g_t
if_z vThreadIDInGroup.x
  ld_structured r0.x, l(0), l(0), g2.xxxx
  ld_structured r0.y, l(1), l(0), g2.xxxx
  iadd r0.y, r0.y, r0.x
  store_structured g2.x, l(0), l(0), l(0)
  store_structured g2.x, l(1), l(0), r0.x
  imm_atomic_iadd r10.x, u2, cb0[23].x, r0.y
  store_raw g3.x, l(0), r10.x
endif 
sync_g_t
if_nz r4.z
  ld_raw r0.x, l(0), g3.xxxx
  ushr r0.yz, vThreadIDInGroup.xxxx, l(0, 4, 2, 0)
  ld_structured r0.y, r0.y, l(0), g2.xxxx
  iadd r0.x, r0.y, r0.x
  ld_structured r0.y, r0.z, l(0), g1.xxxx
  iadd r0.x, r0.y, r0.x
  ld_structured r0.y, vThreadIDInGroup.x, l(0), g0.xxxx
  iadd r0.x, r0.y, r0.x
  iadd r0.y, r0.x, cb0[20].y
  store_uav_typed u1.xyzw, r0.yyyy, r0.wwww
  iadd r0.z, r0.x, cb0[21].z
  iadd r0.z, r0.z, cb0[20].y
  store_uav_typed u1.xyzw, r0.zzzz, r8.xxxx
  ishl r10.xyzw, cb0[21].zzzz, l(1, 2, 3, 4)
  iadd r10.xyzw, r0.xxxx, r10.xyzw
  iadd r10.xyzw, r10.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r10.xxxx, r8.yyyy
  imad r11.xyzw, l(3, 5, 6, 7), cb0[21].zzzz, r0.xxxx
  iadd r11.xyzw, r11.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r11.xxxx, r8.zzzz
  store_uav_typed u1.xyzw, r10.yyyy, r8.wwww
  store_uav_typed u1.xyzw, r11.yyyy, r2.xxxx
  store_uav_typed u1.xyzw, r11.zzzz, r2.yyyy
  store_uav_typed u1.xyzw, r11.wwww, r2.zzzz
  store_uav_typed u1.xyzw, r10.zzzz, r2.wwww
  imad r2.xyzw, l(9, 10, 11, 12), cb0[21].zzzz, r0.xxxx
  iadd r2.xyzw, r2.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r2.xxxx, r1.xxxx
  store_uav_typed u1.xyzw, r2.yyyy, r1.zzzz
  store_uav_typed u1.xyzw, r2.zzzz, r1.wwww
  store_uav_typed u1.xyzw, r2.wwww, r3.xxxx
  imad r2.xyzw, l(13, 14, 15, 17), cb0[21].zzzz, r0.xxxx
  iadd r2.xyzw, r2.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r2.xxxx, r3.yyyy
  store_uav_typed u1.xyzw, r2.yyyy, r3.zzzz
  store_uav_typed u1.xyzw, r2.zzzz, r4.yyyy
  store_uav_typed u1.xyzw, r10.wwww, r5.xxxx
  store_uav_typed u1.xyzw, r2.wwww, r5.yyyy
  imad r2.xyzw, l(18, 19, 20, 21), cb0[21].zzzz, r0.xxxx
  iadd r2.xyzw, r2.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r2.xxxx, r5.zzzz
  store_uav_typed u1.xyzw, r2.yyyy, r4.wwww
  store_uav_typed u1.xyzw, r2.zzzz, r5.wwww
  store_uav_typed u1.xyzw, r2.wwww, r7.wwww
  imad r2.xyzw, l(22, 23, 24, 25), cb0[21].zzzz, r0.xxxx
  iadd r2.xyzw, r2.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r2.xxxx, r9.xxxx
  store_uav_typed u1.xyzw, r2.yyyy, r9.yyyy
  store_uav_typed u1.xyzw, r2.zzzz, r9.zzzz
  store_uav_typed u1.xyzw, r2.wwww, r1.yyyy
  imad r1.xyzw, l(26, 27, 28, 29), cb0[21].zzzz, r0.xxxx
  iadd r1.xyzw, r1.xyzw, cb0[20].yyyy
  store_uav_typed u1.xyzw, r1.xxxx, r3.wwww
  store_uav_typed u1.xyzw, r1.yyyy, r4.xxxx
  store_uav_typed u0.xyzw, r0.yyyy, r6.xxxx
  store_uav_typed u1.xyzw, r1.zzzz, r7.xxxx
  store_uav_typed u1.xyzw, r1.wwww, r7.yyyy
  imad r0.x, l(30), cb0[21].z, r0.x
  iadd r0.x, r0.x, cb0[20].y
  store_uav_typed u1.xyzw, r0.xxxx, r7.zzzz
endif 
ret 
// Approximately 424 instruction slots used
